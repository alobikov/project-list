!function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function r(e){let t=!0;return e.required&&(t=t&&0!=e.value.toString().length),null!=e.minLength&&"string"==typeof e.value&&(t=t&&e.value.length>=e.minLength),null!=e.maxLength&&"string"==typeof e.value&&(t=t&&e.value.length<=e.maxLength),null!=e.min&&"number"==typeof e.value&&(t=t&&e.value>=e.min),null!=e.max&&"number"==typeof e.value&&(t=t&&e.value<=e.max),t}class s extends class{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new s),this.instance}addProject(e,t,n){const r=new l(Math.random().toString().replace(".",""),e,t,n,o.Active);this.projects.push(r),this.listeners.forEach(e=>{e(this.projects.slice())}),this.showProjects()}moveProject(e,t){const n=this.projects.find(t=>t.id===e);n&&n.type!==t&&(n.type=t,console.log({newType:t}),this.listeners.forEach(e=>{e(this.projects.slice())})),this.showProjects()}showProjects(){console.log("we have next projects"),this.projects.forEach(e=>{console.log(e)})}set(e){this.projects=e,console.log(this.projects)}}const i=s.getInstance();var o;!function(e){e.Active="active",e.Finished="finished"}(o||(o={}));class l{constructor(e,t,n,r,s){this.id=e,this.title=t,this.description=n,this.numOfPeople=r,this.type=s}}class c{constructor(e,t,n,r){this.templateElm=document.getElementById(e),this.hostElm=document.getElementById(t);const s=document.importNode(this.templateElm.content,!0);this.element=s.firstElementChild,r&&(this.element.id=r),this.attachElmToHostElm(n)}attachElmToHostElm(e){this.hostElm.insertAdjacentElement(e,this.element),console.log(this)}}class a extends c{constructor(e,t){super("single-project",e,"beforeend",t.id),this.project=t,this.configure(),this.renderContent()}get persons(){return 1===this.project.numOfPeople?"1 person":this.project.numOfPeople+" persons"}dragStartHandler(e){e.dataTransfer.setData("plain/text",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){console.log("dragEnd")}configure(){this.element.addEventListener("dragstart",this.dragStartHandler.bind(this)),this.element.addEventListener("dragend",this.dragEndHandler.bind(this))}renderContent(){console.log("renderContent",this.element),this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons+" assigned",this.element.querySelector("p").textContent=this.project.description}}class d extends c{constructor(e){super("project-list","app","beforeend",e+"-projects"),this.type=e,this.assignedProjects=[],this.configure(),this.renderContent()}dragOverHandler(e){if(e.dataTransfer&&"plain/text"===e.dataTransfer.types[0]){e.preventDefault();const t=this.element.querySelector("ul");null==t||t.classList.add("droppable")}}dragLeaveHandler(e){const t=this.element.querySelector("ul");null==t||t.classList.remove("droppable")}dropHandler(e){const t=e.dataTransfer.getData("plain/text");console.log("project id to move:",t,this.type),i.moveProject(t,this.type)}renderProjects(){document.getElementById(this.type+"-projects-list").innerHTML="",this.assignedProjects.forEach(e=>{e.type===this.type&&(console.log(this.element.id),new a(this.element.querySelector("ul").id,e))})}configure(){this.element.addEventListener("dragover",this.dragOverHandler.bind(this)),this.element.addEventListener("dragleave",this.dragLeaveHandler.bind(this)),this.element.addEventListener("drop",this.dropHandler.bind(this)),i.addListener(e=>{const t=e.filter(e=>this.type===o.Active?e.type===o.Active:e.type===o.Finished);this.assignedProjects=t,this.renderProjects()})}renderContent(){this.element.querySelector("ul").id=this.type+"-projects-list",this.element.querySelector("h2").textContent=this.type.toUpperCase()+" PROJECTS"}}new class extends c{constructor(){super("project-input","app","afterbegin","user-input"),this.titleInput$=this.element.querySelector(".form-control #title"),this.descriptionInput$=this.element.querySelector("#description"),this.peopleInput$=this.element.querySelector("#people"),this.configure()}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();Array.isArray(t)&&(console.log(t),i.addProject(...t),i.showProjects())}gatherUserInput(){const e=this.titleInput$.value.trim(),t=this.descriptionInput$.value.trim(),n=+this.peopleInput$.value.trim(),s={value:t,required:!0,minLength:5},i={value:n,required:!0,min:1,max:5};return r({value:e,required:!0,minLength:3,maxLength:23})&&r(s)&&r(i)?[e,t,+n]:void console.log("Incomplete input")}configure(){this.element.addEventListener("submit",this.submitHandler.bind(this))}renderContent(){}},new d(o.Active),new d(o.Finished)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,